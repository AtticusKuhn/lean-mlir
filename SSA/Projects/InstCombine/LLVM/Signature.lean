import Lean
import Qq
import SSA.Projects.InstCombine.AliveHandwrittenExamples

open AliveAutoGenerated
open Qq Lean Elab Command Meta Elab Term

inductive CliType
| varw -- variable width
| width (n : Nat) -- concrete width given by n

instance : ToString CliType where
 toString
 | .varw => "w"
 | .width (n : Nat) => s!"{n}"



opaque k : Nat
opaque m : Nat
opaque e : Expr

-- pattern match on an `e` to get a list of lean expressions
def ExprToList (e : Expr) : MetaM (List Lean.Expr) := do --sorry
 return []


def ExprToCliType (e : Expr) : MetaM CliType := do
 match e with
 | com@(.app x e) =>
    logInfo m!"toCliType App {x} {e}"
    return CliType.varw
  | _ => pure CliType.varw
/-
  match (e : Q(InstCombine.MTy 0)) with
  | ~q(InstCombine.MTy.bitvec (ConcreteOrMVar.concrete $cw)) => sorry
  | ~q(InstCombine.MTy.bitvec (ConcreteOrMVar.concrete $cw)) => sorry
-/

def printSignature (ty0 : Expr) := do
  match ty0 with
  | .forallE x t ty1 ty1i =>
     logInfo m!"x: {x} | t: {t}"
     -- TODO: verify you `t : Nat`
     match ty1 with
     | .forallE x t ty2 ty2i =>
        logInfo m!"forall"
     | com@(.app x e) =>
       -- TODO: verify that 'x' is `Com`
       let args := (Expr.getAppArgs com)
       let llvmArgTys := args[3]!
       let llvmRetTy := args[4]!
       logInfo m!"argTys: {llvmArgTys}"
       logInfo m!"retTy: {llvmRetTy}"
       let llvmArgTys : List CliType ← liftM <| (← ExprToList llvmArgTys).mapM ExprToCliType
       logInfo m!"argTys (as Cli type): {llvmArgTys}"
       let llvmRetTy ← ExprToCliType llvmRetTy
       logInfo m!"retTy (as Cli type): {llvmRetTy}"
     | _ => pure ()
  | _ => pure ()

elab "foo" : command => liftTermElabM do
  let e : Environment ← getEnv
  let defn :=
    Option.get! <| Environment.find? e ``alive_simplifyDivRemOfSelect_lhs
  let value := defn.value!
  let ty0 ← reduceAll (← inferType defn.value!)
  -- let ty' : Q(Type) := ty
  -- let (ctx, typ) ←
  --   match ty with
  --   | ~q(Com $phi $ctx $typ) => ($ctx, $typ)
  logInfo m!"isLam: {Lean.Expr.isForall ty0} | ty0: {ty0}"
  logInfo m!"isLam: {Lean.Expr.isForall ty0} | ty0: {ty0}"
  -- | forallE (binderName : Name) (binderType : Expr) (body : Expr) (binderInfo : BinderInfo)
  let _ ← printSignature ty0
  return ()

foo

-- Q (α : type witness) =defeq= Expr
